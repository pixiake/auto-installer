apiVersion: kubesphere.io/v1alpha1
kind: InstallPlan
metadata:
  annotations:
    kubesphere.io/installation-mode: "Multicluster"
  name: whizard-alerting
spec:
  enabled: true
  extension:
    name: whizard-alerting
    version: 1.0.0
  config: |-
    global:
      rules:
        # None for environment with enabled whizard
        # Member for environment with disabled whizard
        distributionMode: Member
    
    extension:
      # apiserver container config
      apiserver:
        resources:
          limits:
            cpu: 500m
            memory: 500Mi
          requests:
            cpu: 50m
            memory: 50Mi
    
        image:
          repository: kubesphere/whizard-alerting-apiserver
          # Overrides the image tag whose default is the chart appVersion.
          tag: ""
    
      # container-manager container config
      controllerManager:
        resources:
          limits:
            cpu: 500m
            memory: 500Mi
          requests:
            cpu: 50m
            memory: 50Mi
    
        image:
          repository: kubesphere/whizard-alerting-controller-manager
          # Overrides the image tag whose default is the chart appVersion.
          tag: ""
    
      # Whizard ruler statefulset config.
      # Effective when global.rules.distributionMode is None
      ruler:
        # ruler container config.
        image:
          repository: thanosio/thanos
          tag: v0.34.1
        resources:
          limits:
            cpu: "1"
            memory: 1Gi
          requests:
            cpu: 100m
            memory: 100Mi
    
        # configReloader config to set the container in charge of triggerring ruler container reload changed config.
        configReloader:
          image:
            repository: prometheus-operator/prometheus-config-reloader
            tag: v0.68.0
          resources:
            requests:
              cpu: 10m
              memory: 20Mi
            limits:
              cpu: 100m
              memory: 50Mi
    
        # configReloader config to set the container in charge of proxying to send ALERTS and ALERTS_FOR_STATE metrics to whizard.
        writeProxy:
          image:
            repository: kubesphere/cortex-tenant
            tag: v1.12.5
          resources:
            requests:
              cpu: 50m
              memory: 50Mi
            limits:
              cpu: 500m
              memory: 500Mi
    
        alertmanagersUrl:
        - 'dnssrv+http://whizard-notification-alertmanager-headless.kubesphere-monitoring-system.svc:9093'
        
        # Configure how many shards the ruler is divided into.
        # It is a horizontal scale which decides the ruler statusfulset num.
        # When the ruler has a high load, you can increase the resources, or the number of shards here.
        shards: 1
    
    agent:
    
      # Thanos ruler statefulset config.
      # Effective when global.rules.distributionMode is Member.
      ruler:
        # The alertmanager urls that the ruler will send alerts to.
        alertmanagersUrl: []
        # - '<alertmanager_proxy_url_in_host>'
    
        # ruler container config.
        image:
          repository: thanosio/thanos
          tag: v0.34.1
        resources:
          limits:
            cpu: "1"
            memory: 1Gi
          requests:
            cpu: 100m
            memory: 100Mi
    
        # configReloader config to set the container in charge of triggerring ruler container reload changed config.
        configReloader:
          image:
            repository: prometheus-operator/prometheus-config-reloader
            tag: v0.68.0
          resources:
            requests:
              cpu: 10m
              memory: 20Mi
            limits:
              cpu: 100m
              memory: 50Mi
    
        # prometheus config to set where the ruler will send ALERTS and ALERTS_FOR_STATE metrics.
        prometheus:
          name: k8s
          namespace: kubesphere-monitoring-system
          port: 9090
          # The prometheus replicas. It is just for generating remote write config.
          # If you want to control it by yourself, please firstly configure the replicasAutoGet item as false.
          replicas: 1
          # If true, will ignore the upper replicas item and auto get the prometheus replicas.
          replicasAutoGet: true
  clusterScheduling:
    placement:
      clusters:
      - host
